// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: pkg/grpc/discovery/discovery.proto

package discovery

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DiscoveryClient is the client API for Discovery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DiscoveryClient interface {
	RegisterReplica(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Void, error)
	Replicas(ctx context.Context, in *Void, opts ...grpc.CallOption) (Discovery_ReplicasClient, error)
}

type discoveryClient struct {
	cc grpc.ClientConnInterface
}

func NewDiscoveryClient(cc grpc.ClientConnInterface) DiscoveryClient {
	return &discoveryClient{cc}
}

func (c *discoveryClient) RegisterReplica(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/discovery.Discovery/RegisterReplica", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoveryClient) Replicas(ctx context.Context, in *Void, opts ...grpc.CallOption) (Discovery_ReplicasClient, error) {
	stream, err := c.cc.NewStream(ctx, &Discovery_ServiceDesc.Streams[0], "/discovery.Discovery/Replicas", opts...)
	if err != nil {
		return nil, err
	}
	x := &discoveryReplicasClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Discovery_ReplicasClient interface {
	Recv() (*Node, error)
	grpc.ClientStream
}

type discoveryReplicasClient struct {
	grpc.ClientStream
}

func (x *discoveryReplicasClient) Recv() (*Node, error) {
	m := new(Node)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DiscoveryServer is the server API for Discovery service.
// All implementations must embed UnimplementedDiscoveryServer
// for forward compatibility
type DiscoveryServer interface {
	RegisterReplica(context.Context, *Node) (*Void, error)
	Replicas(*Void, Discovery_ReplicasServer) error
	mustEmbedUnimplementedDiscoveryServer()
}

// UnimplementedDiscoveryServer must be embedded to have forward compatible implementations.
type UnimplementedDiscoveryServer struct {
}

func (UnimplementedDiscoveryServer) RegisterReplica(context.Context, *Node) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterReplica not implemented")
}
func (UnimplementedDiscoveryServer) Replicas(*Void, Discovery_ReplicasServer) error {
	return status.Errorf(codes.Unimplemented, "method Replicas not implemented")
}
func (UnimplementedDiscoveryServer) mustEmbedUnimplementedDiscoveryServer() {}

// UnsafeDiscoveryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiscoveryServer will
// result in compilation errors.
type UnsafeDiscoveryServer interface {
	mustEmbedUnimplementedDiscoveryServer()
}

func RegisterDiscoveryServer(s grpc.ServiceRegistrar, srv DiscoveryServer) {
	s.RegisterService(&Discovery_ServiceDesc, srv)
}

func _Discovery_RegisterReplica_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryServer).RegisterReplica(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/discovery.Discovery/RegisterReplica",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryServer).RegisterReplica(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discovery_Replicas_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Void)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DiscoveryServer).Replicas(m, &discoveryReplicasServer{stream})
}

type Discovery_ReplicasServer interface {
	Send(*Node) error
	grpc.ServerStream
}

type discoveryReplicasServer struct {
	grpc.ServerStream
}

func (x *discoveryReplicasServer) Send(m *Node) error {
	return x.ServerStream.SendMsg(m)
}

// Discovery_ServiceDesc is the grpc.ServiceDesc for Discovery service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Discovery_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "discovery.Discovery",
	HandlerType: (*DiscoveryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterReplica",
			Handler:    _Discovery_RegisterReplica_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Replicas",
			Handler:       _Discovery_Replicas_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/grpc/discovery/discovery.proto",
}
